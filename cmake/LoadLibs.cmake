INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/extern/ompl-1.6.0)

#Eigen3
FIND_PACKAGE(Eigen3 QUIET)
IF(EIGEN3_FOUND)
  MESSAGE(STATUS "Found Eigen3 @ ${EIGEN3_INCLUDE_DIR}")
  INCLUDE_DIRECTORIES(${EIGEN3_INCLUDE_DIR})
ELSE(EIGEN3_FOUND)
  MESSAGE(SEND_ERROR "Cannot find Eigen3!")
ENDIF(EIGEN3_FOUND)

#TinyVisualizer
FIND_PACKAGE(TinyVisualizer QUIET)
IF(TinyVisualizer_FOUND)
  MESSAGE(STATUS "Found TinyVisualizer @ ${TinyVisualizer_INCLUDE_DIRS}")
  MESSAGE(STATUS "Found TinyVisualizer lib @ ${TinyVisualizer_LIBRARIES}")
  INCLUDE_DIRECTORIES(${TinyVisualizer_INCLUDE_DIRS})
  #We add these libraries separately only to C++ target, but not python target
  #LIST(APPEND ALL_LIBRARIES ${TinyVisualizer_LIBRARIES})
ELSE(TinyVisualizer_FOUND)
  MESSAGE(SEND_ERROR "Cannot find TinyVisualizer!")
ENDIF(TinyVisualizer_FOUND)

#QUADMATH
FIND_PACKAGE(QUADMATH QUIET)
IF(QUADMATH_FOUND)
  LIST(APPEND ALL_LIBRARIES ${QUADMATH_LIBRARIES})
  MESSAGE(STATUS "Found QUADMATH @ ${QUADMATH_LIBRARIES}")
  ADD_DEFINITIONS(-DQUADMATH_SUPPORT)
ELSE(QUADMATH_FOUND)
  MESSAGE(WARNING "Cannot find QUADMATH, compiling without it!")
ENDIF(QUADMATH_FOUND)

#GMP
FIND_PACKAGE(GMP QUIET REQUIRED)
IF(GMP_FOUND)
  MESSAGE(STATUS "Found GMP @ ${GMP_INCLUDES}")
  LIST(APPEND ALL_LIBRARIES ${GMP_LIBRARIES})
ELSEIF(GMP_FOUND)
  MESSAGE(SEND_ERROR "Cannot find GMP!")
ENDIF(GMP_FOUND)

#MPFR
FIND_PACKAGE(MPFR QUIET REQUIRED)
IF(MPFR_FOUND)
  MESSAGE(STATUS "Found MPFR @ ${MPFR_INCLUDES}")
  LIST(APPEND ALL_LIBRARIES ${MPFR_LIBRARIES})
ELSEIF(MPFR_FOUND)
  MESSAGE(SEND_ERROR "Cannot find MPFR!")
ENDIF(MPFR_FOUND)

#TinyXML2
FIND_PACKAGE(TINYXML2 QUIET)
IF(TINYXML2_FOUND)
  INCLUDE_DIRECTORIES(${TINYXML2_INCLUDE_DIRS})
  MESSAGE(STATUS "Found TinyXML2 @ ${TINYXML2_INCLUDE_DIRS}")
  LIST(APPEND ALL_LIBRARIES ${TINYXML2_LIBRARIES})
ELSE(TINYXML2_FOUND)
  MESSAGE(SEND_ERROR "Cannot find TinyXML2!")
ENDIF(TINYXML2_FOUND)

#Assimp
FIND_PACKAGE(Assimp QUIET REQUIRED)
IF(Assimp_FOUND)
  INCLUDE_DIRECTORIES(${ASSIMP_INCLUDE_DIR})
  MESSAGE(STATUS "Found Assimp @ ${ASSIMP_INCLUDE_DIR}")
  IF(MSVC)
    IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
      LIST(APPEND ALL_LIBRARIES ${ASSIMP_LIBRARY_DEBUG})
    ELSE()
      LIST(APPEND ALL_LIBRARIES ${ASSIMP_LIBRARY_RELEASE})
    ENDIF()
  ELSE(MSVC)
    LIST(APPEND ALL_LIBRARIES ${ASSIMP_LIBRARY_RELEASE})
  ENDIF(MSVC)
ELSE(Assimp_FOUND)
  MESSAGE(SEND_ERROR "Cannot find Assimp!")
ENDIF(Assimp_FOUND)

#Boost: we only use headers
FIND_PACKAGE(Boost QUIET REQUIRED COMPONENTS serialization filesystem thread chrono)
IF(Boost_FOUND)
  INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
  LIST(APPEND ALL_LIBRARIES ${Boost_LIBRARIES})
  MESSAGE(STATUS "Found Boost @ ${Boost_INCLUDE_DIRS}")
  MESSAGE(STATUS "Found Boost lib @ ${Boost_LIBRARIES}")
ELSEIF(Boost_FOUND)
  MESSAGE(SEND_ERROR "Cannot find boost!")
ENDIF(Boost_FOUND)

#CGAL
SET(CGAL_DO_NOT_WARN_ABOUT_CMAKE_BUILD_TYPE True)
SET(CGAL_DATA_DIR ${PROJECT_BINARY_DIR})
FIND_PACKAGE(CGAL QUIET)
IF(CGAL_FOUND)
  INCLUDE_DIRECTORIES(${CGAL_INCLUDE_DIRS})
  MESSAGE(STATUS "Found CGAL @ ${CGAL_INCLUDE_DIRS}")
  LIST(APPEND ALL_LIBRARIES ${CGAL_LIBRARY})
  ADD_DEFINITIONS(-DCGAL_SUPPORT)
ELSE(CGAL_FOUND)
  MESSAGE(WARNING "Cannot find CGAL, 3D meshing not supported!")
ENDIF(CGAL_FOUND)

#NUMA
IF(NOT MSVC)
  FIND_PACKAGE(Numa)
  IF(NUMA_FOUND)
    MESSAGE(STATUS "Found Numa @ ${NUMA_INCLUDE_DIRS}")
    LIST(APPEND ALL_LIBRARIES ${NUMA_LIBRARY})
    INCLUDE_DIRECTORIES(${NUMA_INCLUDE_DIRS})
  ELSEIF(NUMA_FOUND)
    MESSAGE(SEND_ERROR "Cannot find numa!")
  ENDIF(NUMA_FOUND)
ENDIF(NOT MSVC)

#Pybind11-Python
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/extern/pybind11/include)
SET(PYTHON_BINDING None CACHE STRING "Build Pybind11-Python interface")
SET_PROPERTY(CACHE PYTHON_BINDING PROPERTY STRINGS None Python2 Python3)
IF(PYTHON_BINDING STREQUAL "Python2")
  FIND_PACKAGE(Python2 REQUIRED COMPONENTS Interpreter Development NumPy)
  SET(Python_INCLUDE_DIRS ${Python2_INCLUDE_DIRS})
  SET(Python_LIBRARIES ${Python2_LIBRARIES})
  SET(Python_SITELIB ${Python2_SITELIB})
  IF(Python2_FOUND)
    ADD_DEFINITIONS(-DPYTHON_BINDING)
    MESSAGE(STATUS "Found Python${Python2_VERSION}")
    INCLUDE_DIRECTORIES(${Python_INCLUDE_DIRS})
    LIST(APPEND ALL_LIBRARIES ${Python_LIBRARIES})
      SET(USE_BOOST OFF)
  ELSE()
    MESSAGE(WARNING "Cannot find Python2!")
    SET(PYTHON_BINDING "None")
  ENDIF()
ELSEIF(PYTHON_BINDING STREQUAL "Python3")
  FIND_PACKAGE(Python3 REQUIRED COMPONENTS Interpreter Development NumPy)
  SET(Python_INCLUDE_DIRS ${Python3_INCLUDE_DIRS})
  SET(Python_LIBRARIES ${Python3_LIBRARIES})
  SET(Python_SITELIB ${Python3_SITELIB})
  IF(Python3_FOUND)
    ADD_DEFINITIONS(-DPYTHON_BINDING)
    MESSAGE(STATUS "Found Python${Python3_VERSION}")
    INCLUDE_DIRECTORIES(${Python_INCLUDE_DIRS})
    LIST(APPEND ALL_LIBRARIES ${Python_LIBRARIES})
      SET(USE_BOOST OFF)
  ELSE()
    MESSAGE(WARNING "Cannot find Python3!")
    SET(PYTHON_BINDING "None")
  ENDIF()
ENDIF()
