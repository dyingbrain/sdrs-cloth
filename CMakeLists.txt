CMAKE_MINIMUM_REQUIRED(VERSION 3.21)
PROJECT(PhysicsMotion)

#COMPILE SETTINGS
SET(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
SET(CMAKE_BUILD_TYPE Release CACHE STRING "Compiler optimization level")
SET_PROPERTY(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS Debug Release)
IF(NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release)
ENDIF()
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}/cmake/")
IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
  MESSAGE(STATUS "Build type: Debug")
  IF(MSVC)
    SET(CMAKE_CXX_FLAGS "/openmp /bigobj /Wall /std:c++17 /MP ${CMAKE_CXX_FLAGS}")
    ADD_COMPILE_OPTIONS(/wd4711)    
    ADD_COMPILE_OPTIONS(/wd4710) 
    ADD_COMPILE_OPTIONS(/wd4365)
    ADD_COMPILE_OPTIONS(/wd4820)
    ADD_COMPILE_OPTIONS(/wd4464)
    ADD_COMPILE_OPTIONS(/wd5031)
    ADD_COMPILE_OPTIONS(/wd4668)
    ADD_COMPILE_OPTIONS(/wd4244)
    ADD_COMPILE_OPTIONS(/wd4146)
    ADD_COMPILE_OPTIONS(/wd4355)
    ADD_COMPILE_OPTIONS(/wd4266)
    ADD_COMPILE_OPTIONS(/wd4267)
    ADD_COMPILE_OPTIONS(/wd5027)
    ADD_COMPILE_OPTIONS(/wd5266)
    ADD_COMPILE_OPTIONS(/wd5267)
    ADD_COMPILE_OPTIONS(/wd4626)
    ADD_COMPILE_OPTIONS(/wd4514)
    ADD_COMPILE_OPTIONS(/wd4625)
    ADD_COMPILE_OPTIONS(/wd5026)
    ADD_COMPILE_OPTIONS(/wd4100)
    ADD_COMPILE_OPTIONS(/wd4127)
    ADD_COMPILE_OPTIONS(/wd4623)
    ADD_COMPILE_OPTIONS(/wd4242)
    ADD_COMPILE_OPTIONS(/wd4245)
    ADD_COMPILE_OPTIONS(/wd5219)
    ADD_COMPILE_OPTIONS(/wd4061)
    ADD_COMPILE_OPTIONS(/wd4800)
    ADD_COMPILE_OPTIONS(/wd4996)
    ADD_COMPILE_OPTIONS(/wd5246)
    ADD_COMPILE_OPTIONS(/wd4458)
    ADD_COMPILE_OPTIONS(/wd4388)
    ADD_COMPILE_OPTIONS(/wd4101)
    ADD_COMPILE_OPTIONS(/wd4505)
    ADD_COMPILE_OPTIONS(/wd5045)
    ADD_COMPILE_OPTIONS(/wd4263)
    ADD_COMPILE_OPTIONS(/wd4264)
    ADD_COMPILE_OPTIONS(/wd4701)
    ADD_COMPILE_OPTIONS(/wd4296)
    ADD_COMPILE_OPTIONS(/wd5039)
    ADD_COMPILE_OPTIONS(/wd4459)
    ADD_COMPILE_OPTIONS(/wd4305)
    ADD_COMPILE_OPTIONS(/wd5204)
    ADD_COMPILE_OPTIONS(/wd4457)
    ADD_COMPILE_OPTIONS(/wd4866)
  ELSE(MSVC)
    ADD_COMPILE_DEFINITIONS(_GLIBCXX_DEBUG=1)
    ADD_COMPILE_DEFINITIONS(_GLIBCXX_USE_CXX11_ABI=1)
    SET(CMAKE_CXX_FLAGS "-fopenmp -O0 -Wall -fPIC -std=c++17 -Wno-unused-function -Wno-unused-local-typedefs ${CMAKE_CXX_FLAGS}")
  ENDIF(MSVC)
ELSE()
  MESSAGE(STATUS "Build type: Release")
  IF(MSVC)
    SET(CMAKE_CXX_FLAGS "/openmp /bigobj /Wall /std:c++17 /MP ${CMAKE_CXX_FLAGS}")
    ADD_COMPILE_OPTIONS(/wd4711)    
    ADD_COMPILE_OPTIONS(/wd4710) 
    ADD_COMPILE_OPTIONS(/wd4365)    
    ADD_COMPILE_OPTIONS(/wd4820)
    ADD_COMPILE_OPTIONS(/wd4464)
    ADD_COMPILE_OPTIONS(/wd5031)
    ADD_COMPILE_OPTIONS(/wd4668)
    ADD_COMPILE_OPTIONS(/wd4244)
    ADD_COMPILE_OPTIONS(/wd4146)
    ADD_COMPILE_OPTIONS(/wd4355)
    ADD_COMPILE_OPTIONS(/wd4266)
    ADD_COMPILE_OPTIONS(/wd4267)
    ADD_COMPILE_OPTIONS(/wd5027)
    ADD_COMPILE_OPTIONS(/wd5266)
    ADD_COMPILE_OPTIONS(/wd5267)
    ADD_COMPILE_OPTIONS(/wd4626)
    ADD_COMPILE_OPTIONS(/wd4514)
    ADD_COMPILE_OPTIONS(/wd4625)
    ADD_COMPILE_OPTIONS(/wd5026)
    ADD_COMPILE_OPTIONS(/wd4100)
    ADD_COMPILE_OPTIONS(/wd4127)
    ADD_COMPILE_OPTIONS(/wd4623)
    ADD_COMPILE_OPTIONS(/wd4242)
    ADD_COMPILE_OPTIONS(/wd4245)
    ADD_COMPILE_OPTIONS(/wd5219)
    ADD_COMPILE_OPTIONS(/wd4061)
    ADD_COMPILE_OPTIONS(/wd4800)
    ADD_COMPILE_OPTIONS(/wd4996)
    ADD_COMPILE_OPTIONS(/wd5246)
    ADD_COMPILE_OPTIONS(/wd4458)
    ADD_COMPILE_OPTIONS(/wd4388)
    ADD_COMPILE_OPTIONS(/wd4101)
    ADD_COMPILE_OPTIONS(/wd4505)
    ADD_COMPILE_OPTIONS(/wd5045)
    ADD_COMPILE_OPTIONS(/wd4263)
    ADD_COMPILE_OPTIONS(/wd4264)
    ADD_COMPILE_OPTIONS(/wd4701)
    ADD_COMPILE_OPTIONS(/wd4296)
    ADD_COMPILE_OPTIONS(/wd5039)
    ADD_COMPILE_OPTIONS(/wd4459)
    ADD_COMPILE_OPTIONS(/wd4305)
    ADD_COMPILE_OPTIONS(/wd5204)
    ADD_COMPILE_OPTIONS(/wd4457)
    ADD_COMPILE_OPTIONS(/wd4866)
  ELSE(MSVC)
    ADD_COMPILE_DEFINITIONS(_GLIBCXX_USE_CXX11_ABI=1)
    SET(CMAKE_CXX_FLAGS "-fopenmp -O3 -Wall -fPIC -std=c++17 -Wno-unused-function -Wno-unused-local-typedefs ${CMAKE_CXX_FLAGS}")
  ENDIF(MSVC)
ENDIF()
SET(CMAKE_CONFIGURATION_TYPES ${CMAKE_BUILD_TYPE})

#C++11 ABI
OPTION(USE_CXX11_ABI "Whether to use C++11's ABI" ON)
IF(NOT ${USE_CXX11_ABI})
  MESSAGE(STATUS "Disabling C++11's ABI")
  SET(CMAKE_CXX_FLAGS "-D_GLIBCXX_USE_CXX11_ABI=0 ${CMAKE_CXX_FLAGS}")
ELSE()
  MESSAGE(STATUS "Enabling C++11's ABI")
ENDIF()

#LIBRARY SETTINGS
SET(FLOAT_PRECISION double CACHE STRING "Multi-precision setting")
IF(QUADMATH_FOUND)
  SET_PROPERTY(CACHE FLOAT_PRECISION PROPERTY STRINGS double float128 mpfr_float)
ELSE(QUADMATH_FOUND)
  SET_PROPERTY(CACHE FLOAT_PRECISION PROPERTY STRINGS double mpfr_float)
ENDIF(QUADMATH_FOUND)
ADD_DEFINITIONS(-DFLOAT=${FLOAT_PRECISION})
INCLUDE("${PROJECT_SOURCE_DIR}/cmake/LoadLibs.cmake")
IF(${FLOAT_PRECISION} STREQUAL "double")
ELSE()
  ADD_DEFINITIONS(-DFORCE_ADD_DOUBLE_PRECISION)
ENDIF()

#THIRD PARTY HEADERS
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/extern)
MACRO(SEARCH_SOURCE NAME DIRPRJ)
  FILE(GLOB_RECURSE header${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.h ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.hpp ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.hh)
  FILE(GLOB_RECURSE source${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cpp ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cpp ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cc ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.c)
ENDMACRO(SEARCH_SOURCE)
SEARCH_SOURCE(Articulated Articulated)
SEARCH_SOURCE(Environment Environment)
SEARCH_SOURCE(ConvexHull ConvexHull)
SEARCH_SOURCE(SIPCollision SIPCollision)
SEARCH_SOURCE(ADMM ADMM)
SEARCH_SOURCE(Utils Utils)
SEARCH_SOURCE(CCD extern/CCD)
SEARCH_SOURCE(CTCD extern/CTCD)
#BUILD LIBRARY
ADD_LIBRARY(PhysicsMotion STATIC
  ${sourceArticulated} ${headerArticulated}
  ${sourceEnvironment} ${headerEnvironment}
  ${sourceConvexHull} ${headerConvexHull}
  ${sourceSIPCollision} ${headerSIPCollision}
  ${sourceADMM} ${headerADMM}
  ${sourceCCD} ${headerCCD}
  ${sourceCTCD} ${headerCTCD}
  ${sourceUtils} ${headerUtils})
TARGET_LINK_LIBRARIES(PhysicsMotion ${ALL_LIBRARIES} ${TinyVisualizer_LIBRARIES})
SET_TARGET_PROPERTIES(PhysicsMotion PROPERTIES PUBLIC_HEADER "${headerArticulated}" "${headerEnvironment}" "${headerConvexHull}" "${headerADMM}" "${headerUtils}")

#INSTALL LIBRARY
INSTALL(TARGETS PhysicsMotion
  LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}/${CMAKE_BUILD_TYPE}
  ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/${CMAKE_BUILD_TYPE}
  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/PhysicsMotion)
  
#Remove visualizer
MACRO(REMOVE_VISUALIZER SRC_FILES)
  STRING(CONCAT TAR_FILES ${SRC_FILES} "NoVis")
  FOREACH(ITEM ${${SRC_FILES}})
    STRING(FIND "${ITEM}" "Visualizer" RES)
    IF(${RES} LESS 0)
      LIST(APPEND ${TAR_FILES} "${ITEM}")
    ENDIF()
  ENDFOREACH()
ENDMACRO()

#EXE
MACRO(ADD_EXE NAME)
  ADD_EXECUTABLE(${NAME} Main/${FOLDER}/${NAME}.cpp)
  IF(MSVC)
    TARGET_LINK_LIBRARIES(${NAME} PhysicsMotion ${ALL_STATIC_LIBRARIES})
  ELSE(MSVC)
    TARGET_LINK_LIBRARIES(${NAME} PhysicsMotion gomp ${ALL_STATIC_LIBRARIES})
  ENDIF(MSVC)
ENDMACRO(ADD_EXE)

#DEBUG
SET(FOLDER DebugADMM)
ADD_EXE(mainARAP2D)
ADD_EXE(mainARAP2DBetaProfile)
ADD_EXE(mainARAP3D)
ADD_EXE(mainARAP3DProfile)
ADD_EXE(mainARAP2DFinger)
ADD_EXE(mainARAP3DFinger)


ADD_EXE(mainMassSpring2D)
#ADD_EXE(mainMassSpring3D)
ADD_EXE(mainMassSpring3DSkirt)
ADD_EXE(mainMassSpring3DSkirtNoCollision)
ADD_EXE(mainMassSpring2DLong)
ADD_EXE(mainMassSpring2DLongBetaProfile)
ADD_EXE(mainMassSpring3DLong)
ADD_EXE(mainMassSpring3DLongMoreIter)
ADD_EXE(mainMassSpring3DLongProfile)
ADD_EXE(mainMassSpring3DPin)
ADD_EXE(mainMassSpring2DSelf)
ADD_EXE(mainMassSpring3DSelf)
ADD_EXE(mainARAP2DDrag)
ADD_EXE(mainARAP3DDrag)

ADD_EXE(mainDebugARAP)
ADD_EXE(mainDebugTet)
ADD_EXE(mainDebugMassSpring)
ADD_EXE(mainDebugL1)
ADD_EXE(mainDebugUAV)
ADD_EXE(mainDebugCollision)
ADD_EXE(mainDebugSpatialHash)
ADD_EXE(mainDebugCollisionDetection)
ADD_EXE(mainNavigation)
ADD_EXE(mainNavigationProfile)
ADD_EXE(mainUAV)
ADD_EXE(mainUAVProfile)
